#+TITLE: EMACS CONFIGURATION
#+OPTIONS: toc:nil

* Packages
** Melpa
#+BEGIN_SRC emacs-lisp
	(dolist (package '(evil dash helm transient with-editor
    magit org-bullets engine-mode rainbow-delimiters projectile
    doom-modeline))
	 (unless (package-installed-p package)
	   (package-install package))
	   (require package))
  
	(require 'evil)
	(evil-mode 1)
	(require 'dash)
	(require 'org-bullets)
	(require 'helm)
      (use-package evil-surround
	:ensure t
	:config
	(global-evil-surround-mode 1))
    (require 'evil-surround)
#+END_SRC
** Apt
#+BEGIN_SRC bash
APT_PACKAGES=(
    emacs
    texlive-latex-recommended
    texlive-latex-extra
    texlive-fonts-recommended
    texlive-base
    texlive-latex-base
)
apt update
apt install $APT_PACKAGES
#+END_SRC

* Personlig
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Carl Ola Fornander")
(setq user-email-address "ofornander@gmail.com") 
#+END_SRC

* Style
** Basic Interface
*** Native
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
(display-time-mode 1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(set-face-attribute 'default nil :height 120)
(setq inhibit-splash-screen t)
#+END_SRC

** Org Bullets Mode
#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(org-bullets-mode t)
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp
  (require 'doom-modeline)
  (doom-modeline-mode 1)
  ;all-the-icons-install-fonts
#+END_SRC

* Custom Set Variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
  '(inhibit-startup-screen t)
  '(display-time-24hr-format t)

)
#+END_SRC

* Custom Set Faces
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC

* Tex
#+begin_src emacs-lisp
;;; AUCTEX
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)

(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)

(setq TeX-PDF-mode t)
#+END_SRC

* Mappings
#+BEGIN_SRC emacs-lisp
(defun fullscreen ()
  (interactive)
  (set-frame-parameter nil 'fullscreen
		       (if (frame-parameter nil 'fullscreen) nil 'fullboth))
  (progn
    (if fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
)
(global-set-key [f11] 'fullscreen)
#+END_SRC
* Orgmode
*** General
#+BEGIN_SRC emacs-lisp
  (require 'org)
  (org-babel-load-file "~/org/org_config.org")
#+END_SRC

** Org Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
      '(
  (shell . t)
  (plantuml . t)))
  
(setq org-plantuml-jar-path (expand-file-name "~/plantuml.jar"))
(add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
#+END_SRC
** test plantuml
#+BEGIN_SRC plantuml :file my-diagram.png
participant Participant as Foo
actor       Actor       as Foo1
boundary    Boundary    as Foo2
control     Control     as Foo3
entity      Entity      as Foo4
database    Database    as Foo5
collections Collections as Foo6
queue       Queue       as Foo7
Foo -> Foo1 : To actor 
Foo -> Foo2 : To boundary
Foo -> Foo3 : To control
Foo -> Foo4 : To entity
Foo -> Foo5 : To database
Foo -> Foo6 : To collections
Foo -> Foo7: To queue
#+END_SRC

#+CAPTION: This is the caption for the next table (or link)
[[file:my-diagram.png]]

* Helm
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC

* Engine-mode
#+BEGIN_SRC emacs-lisp
(require 'engine-mode)
(engine-mode t)
  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")
#+END_SRC

* Ido
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
#+END_SRC

* Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

